package com.seg2.edudata.graphs;

import android.graphics.Color;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.Toast;
import com.seg2.edudata.R;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Yannick on 05/12/2014.
 */
public class LineGraph extends Graph {

    private LineChartView view;

    private boolean hasLines = true;
    private boolean hasPoints = true;
    private boolean isFilled = false;
    private boolean hasLabels = false;
    private boolean isCubic = true;

    private ArrayList<Integer> date;

    @Override
    public void onStart() {
        super.onStart();

        graph = this;
        view = new LineChartView(activity);

        CountryData = new ArrayList<>();
        date = new ArrayList<Integer>();

        getGraphData(false);
        DefineChartBehaviour();
        DefineChartData();
        createGraph();
        setHasOptionsMenu(true);

    }

    public LineChartView getGraphView() {
        return view;
    }

    public void reset() {
        hasLines = true;
        hasPoints = true;
        isFilled = false;
        hasLabels = true;
        isCubic = true;
        DefineChartData();
    }

    public void toggleCubic() {
        isCubic = !isCubic;
        DefineChartData();

    }

    public void toggleFilled() {
        isFilled = !isFilled;
        DefineChartData();
    }

    public void toggleLines() {
        if (hasLines & hasPoints) {
            hasPoints = false;
        } else if (hasLines & !hasPoints) {
            hasLines = false;
            hasPoints = true;
        } else {
            hasLines = true;
        }

        DefineChartData();
    }

    public void toggleLabels() {
        hasLabels = !hasLabels;
        DefineChartData();
    }

    protected void DefineChartBehaviour() {
        view.setOnValueTouchListener(new LineChartView.LineChartOnValueTouchListener() {
            private Toast t;

            @Override
            public void onValueTouched(int selectedLine, int selectedValue,
                                       PointValue pointValue) {
                if (t != null)
                    t.cancel();
                t = Toast.makeText(activity, "" + pointValue.getX() + ", "
                        + pointValue.getY(), Toast.LENGTH_LONG);
                t.getView().setBackgroundColor(
                        Color.parseColor(Colours[selectedLine]));
                t.show();
            }

            @Override
            public void onNothingTouched() {
                if (t != null)
                    t.cancel();
            }
        });
    }

    protected void DefineChartData() {
        LineChartData chartdata = new LineChartData();
        ArrayList<Line> lines = new ArrayList<Line>();

        for (int i = 0; i < CountryData.size(); i += 1) {
            JSONArray JA = CountryData.get(i);
            List<PointValue> values = new ArrayList<PointValue>();

            for (int j = 0; j < JA.length(); j += 1) {
                JSONObject JO;
                try {
                    JO = JA.getJSONObject(j);
                    if (seekbarChanged) {
                        if (JO.getDouble("date") >= dateFrom & JO.getDouble("date") <= dateTo) {
                            values.add(new PointValue((float) JO.getDouble("date"), (float) JO.getDouble("value")));
                        }
                    } else {
                        values.add(new PointValue((float) JO.getDouble("date"), (float) JO.getDouble("value")));
                    }
                    date.add(JO.getInt("date"));

                } catch (Exception ex) {

                }
            }

            Line line = new Line(values);
            line.setColor(Color.parseColor(Colours[i]));
            line.setCubic(isCubic);
            line.setFilled(isFilled);
            line.setHasLabels(hasLabels);
            line.setHasLabelsOnlyForSelected(!hasLabels);
            line.setHasLines(hasLines);
            line.setHasPoints(hasPoints);
            lines.add(line);
        }

        chartdata.setLines(lines);

        Axis AxisX = new Axis().setAutoGenerated(true).setMaxLabelChars(4);
        Axis AxisY = new Axis().setAutoGenerated(true).setMaxLabelChars(8)
                .setHasLines(true);
        chartdata.setAxisXBottom(AxisX);
        chartdata.setAxisYLeft(AxisY);

        chartdata.setBaseValue(Float.NEGATIVE_INFINITY);
        view.setLineChartData(chartdata);

    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.menu_graph, menu);
        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_reset:
                graph.reset();
                return true;
            case R.id.action_toggle_cubic:
                graph.toggleCubic();
                return true;
            case R.id.action_toggle_area:
                graph.toggleFilled();
                return true;
            case R.id.action_toggle_lines:
                graph.toggleLines();
                return true;
            case R.id.action_toggle_labels:
                graph.toggleLabels();
                return true;
            case android.R.id.home:
                getActivity().finish();
                return true;
        }
        return true;
    }
}