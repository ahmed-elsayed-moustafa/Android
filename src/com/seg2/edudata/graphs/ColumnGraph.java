package com.seg2.edudata.graphs;

import android.graphics.Color;
import android.widget.Toast;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Column;
import lecho.lib.hellocharts.model.ColumnChartData;
import lecho.lib.hellocharts.model.ColumnValue;
import lecho.lib.hellocharts.view.ColumnChartView;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * A basic column graph representation class.
 */
public class ColumnGraph extends Graph {

    private ColumnChartView view;

    private boolean hasLabels = false;
    private int dataType = 0;

    @Override
    public void onStart() {
        super.onStart();

        graph = this;
        view = new ColumnChartView(activity);

        CountryData = new ArrayList<>();

        getGraphData(false);
        DefineChartBehaviour();
        DefineChartData();
        createGraph();
        setHasOptionsMenu(true);
    }

    /**
     * Gets the chart view
     * @return view
     */
    public ColumnChartView getGraphView() {
        return view;
    }

    /**
     * Resets the graph
     */
    public void reset() {
        hasLabels = false;
        DefineChartData();
    }

    public void toggleCubic() {
        // no effect for this graph
    }

    public void toggleFilled() {
        // no effect for this graph
    }

    public void toggleLines() {
        // no effect for this graph
    }
    /**
     * Toggles labels
     */
    public void toggleLabels() {
        hasLabels = !hasLabels;
        DefineChartData();
    }

    protected void DefineChartBehaviour() {
        view.setOnValueTouchListener(new ColumnChartView.ColumnChartOnValueTouchListener() {
            private Toast t;

            @Override
            public void onValueTouched(int selectedColumn, int selectedValue, ColumnValue columnValue) {
                if (t != null)
                    t.cancel();
                t = Toast.makeText(activity, "" + columnValue.getValue(), Toast.LENGTH_LONG);
                t.getView().setBackgroundColor(
                        Color.parseColor(Colours[selectedColumn]));
                t.show();
            }

            @Override
            public void onNothingTouched() {
                if (t != null)
                    t.cancel();
            }
        });
    }

    protected void DefineChartData() {
        ArrayList<Column> columns = new ArrayList<>();

        for (int i = 0; i < CountryData.size(); i += 1) {
            JSONArray JA = CountryData.get(i);
            ArrayList<ColumnValue> values = new ArrayList<>();

            for (int j = 0; j < JA.length(); j += 1) {
                JSONObject JO;
                try {
                    JO = JA.getJSONObject(j);
                    if (seekbarChanged) {
                        if (JO.getDouble("date") >= dateFrom & JO.getDouble("date") <= dateTo) {
                            values.add(new ColumnValue((float) JO.getDouble("value"), Color.parseColor(Colours[i])));
                        }
                    } else {
                        values.add(new ColumnValue((float) JO.getDouble("value"), Color.parseColor(Colours[i])));
                    }
                    date.add(JO.getInt("date"));

                } catch (Exception ex) {
                    //break;
                }
            }

            columns.add(new Column(values));
        }

        ColumnChartData chartdata = new ColumnChartData(columns);
        chartdata.setColumns(columns);

        Axis AxisY = new Axis().setAutoGenerated(true).setMaxLabelChars(8).setHasLines(true);
        chartdata.setAxisYLeft(AxisY);

        view.setColumnChartData(chartdata);

    }
}